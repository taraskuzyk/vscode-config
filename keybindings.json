[
    // navigate between panes like tmux
    {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight"
    },
    // move buffers to left / right pane
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    // tried getting the C-n and C-p for up and down navigation through different menus
    // it didn't work, but keeping this here for future reference
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+n",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+p",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },

    // refactoring keybinds (tried doing this in vim config but ended up compromising with this)
    {
        "key": "ctrl+space r m",
        "command": "editor.action.codeAction",
        "args": {
            "kind": "refactor.extract.method"
        },
        "when": "editorTextFocus && vim.active && vim.mode == 'Visual'"
    },
    {
        "key": "ctrl+space r n",
        "command": "editor.action.rename",
        "when": "editorTextFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+space r v",
        "command": "editor.action.codeAction",
        "args": {
            "kind": "refactor.extract.variable"
        },
        "when": "editorTextFocus && vim.active && vim.mode == 'Visual'"
    },
    {
        "key": "ctrl+space r c",
        "command": "editor.action.codeAction",
        "args": {
            "kind": "refactor.extract.constant",
            "preferred": true
        },
        "when": "editorTextFocus && vim.active && vim.mode == 'Visual'"
    },
    // closing / reopening tabs
    {
        "key": "ctrl+x",
        "command": "workbench.action.closeActiveEditor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+x",
        "command": "-workbench.view.extensions"
    },
    {
        "key": "ctrl+shift+x",
        "command": "workbench.action.reopenClosedEditor",
        "when": "editorTextFocus"
    },
    // misc navigation
    {
        "key": "ctrl+tab",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.toggleSidebarVisibility",
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.view.extension.test"
    },
    // debug mode
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.debug.stepOver",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+shift+j",
        "command": "workbench.action.debug.stepInto",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+shift+k",
        "command": "workbench.action.debug.stepOut",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+shit+r",
        "command": "workbench.action.debug.runToCursor",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+shift+c",
        "command": "workbench.action.debug.continue",
        "when": "inDebugMode"
    },
]